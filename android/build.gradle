group = "com.example.amps_sdk"
version = "1.0-SNAPSHOT"
// At the top of your build.gradle
String mavenLocalRepoPath = "${rootProject.projectDir}/m2repository"
// Ensure the directory exists
new File(mavenLocalRepoPath).mkdirs()
buildscript {
    ext.kotlin_version = "2.1.0"
    repositories {
        google()
        mavenCentral()
        maven {
            url "file://${rootProject.projectDir}/m2repository"
        }
    }

    dependencies {
        classpath("com.android.tools.build:gradle:8.10.1")
        classpath("org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version")
    }
}

allprojects {
    repositories {
        google()
        mavenCentral()
        maven {
            name = "myrepo"
            url = uri("file://${rootProject.projectDir}/m2repository")
        }
    }
}

apply plugin: "com.android.library"
apply plugin: "kotlin-android"
apply plugin: "maven-publish"
publishing {
    publications {
        // 第一个 AAR 的 Publication
        libraryOne(MavenPublication) {
            groupId = 'com.example'
            artifactId = 'amps-sdk'
            version = '1.0'
            //示例：假设你的模块名为 'amps_sdk' (与项目名一致)
            //并且你要发布 release AAR
            // 这个路径是相对于当前 build.gradle 所在模块的
            artifact "libs/amps.aar"//在同一目录层级。所以可以写成libs/amps.aar
        }
        release(MavenPublication) {
            groupId = 'com.example'
            artifactId = 'common'
            version = '1.0'
            //示例：假设你的模块名为 'amps_sdk' (与项目名一致)
            //并且你要发布 release AAR
            // 这个路径是相对于当前 build.gradle 所在模块的
            artifact "libs/CommonV2-cBoth-debug.aar"
        }
    }
    repositories {
        maven {
            name = 'myrepo'
            url = mavenLocalRepoPath
        }
    }
}
//通过调试tasks调试路径：不需要调试之后删除即可
tasks.register("anotherTask") {
    doLast {
        logger.lifecycle(">>>>> [EXECUTION] 路径=${rootProject.projectDir.parentFile.parentFile}") // 使用 lifecycle 确保默认可见
    }
}
android {
    namespace = "com.example.amps_sdk"

    compileSdk = 36

    compileOptions {
        sourceCompatibility = JavaVersion.VERSION_11
        targetCompatibility = JavaVersion.VERSION_11
    }

    kotlinOptions {
        jvmTarget = JavaVersion.VERSION_11
    }

    sourceSets {
        main.java.srcDirs += "src/main/kotlin"
        test.java.srcDirs += "src/test/kotlin"
    }

    defaultConfig {
        minSdk = 24
    }

    dependencies {
        //compileOnly fileTree(dir: 'libs', include: '*.aar')
//        // 依赖第一个 AAR (amps-sdk)
        api ('com.example:amps-sdk:1.0')
//        // 依赖第二个 AAR (common)
        api ('com.example:common:1.0')
        compileOnly ('androidx.annotation:annotation:1.8.0')
        compileOnly ('androidx.appcompat:appcompat:1.7.1')
        compileOnly ('com.google.android.material:material:1.13.0')
        testImplementation ('junit:junit:4.13.2')
        androidTestImplementation ('androidx.test.ext:junit:1.3.0')
        androidTestImplementation ('androidx.test.espresso:espresso-core:3.7.0')
        testImplementation("org.jetbrains.kotlin:kotlin-test")
        testImplementation("org.mockito:mockito-core:5.19.0")
    }

    testOptions {
        unitTests.all {
            useJUnitPlatform()

            testLogging {
               events "passed", "skipped", "failed", "standardOut", "standardError"
               outputs.upToDateWhen {false}
               showStandardStreams = true
            }
        }
    }
}
// 读取 local.properties 文件
def localProperties = new Properties()
def localPropertiesFile = rootProject.file('local.properties')
if (localPropertiesFile.exists()) {
    localProperties.load(new FileInputStream(localPropertiesFile))
}

// 获取 Flutter SDK 路径
def flutterRoot = localProperties.getProperty('flutter.sdk')
if (flutterRoot == null) {
    throw new GradleException("Flutter SDK not found. Define location with flutter.sdk in the local.properties file.")
}

// 定义一个变量来存储 Flutter 引擎库路径
def flutterEnginePath = "$flutterRoot/bin/cache/artifacts/engine/android-arm/flutter.jar"

// 确保 Flutter 引擎库存在
if (!file(flutterEnginePath).exists()) {
    throw new GradleException("Flutter engine library not found at: $flutterEnginePath")
}

dependencies {
    compileOnly files(flutterEnginePath)
    compileOnly 'androidx.annotation:annotation:1.8.0'
}